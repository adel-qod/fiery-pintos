The BIOS after doing POST will read the MBR (Master Boot Record) which is the
first sector that contains the signature 0xaa55 at its end.
(the 0xaa55 is the signature for a sector that contains a partition table)

This sector, 512 bytes of size, usually contains the following:
- Boot loading code
- 4 partition entries (each sized 16 bytes - directly before signature)
- One byte for the MBR signature 

In our case, Pintos uses 128 bytes for command line arguments
So our MBR looks like this:
[0   - 316] Pintos boot loader
[317 - 445] Pintos command line arguments
[446 - 509] Partition table entries
[510 - 511] 0xaaaa

The partition table is made up of four partition table entries.
Each entry, of 16 bytes length, is formatted as follows:
[0]  	    Boot indicator (0 for not bootable, 0x80 for system bootable)
[1-3]*	    Begin CHS (Cylinder, Head, Sector - format found online)
[4]	    Partition type (Type of the partition FS family; 0x20 for Pintos)
[5-7]*	    End CHS (Cylinder, Head, Sector)
[8-11]	    The 4-byte little endian value of the starting sector number
[12-15]	    The 4-byte little endian value of the partition size in sectors

* It's often unclear what values should the CHS take so these addresses should
  be ignored

The loader mentioned above is contained in the file: ./src/threads/loader.S
The BIOS after reading the MBR sector will load its contents in the physical
address 0x7c00 to 0x7e00 (512 bytes) and jump execution to its beginning 
The loader does the following:
   1- Set up stack and data segment to start at 0x0000 
   2- Start the stack at 0xf000 (~ 61kb) the stack grows downwards
   3- Set up serial port for later usage
   4- Read partition table on each hard disk and scan for a partition with type
   0x20 (Pintos marker)
   5- Once the partition with type 0x20 is found, the kernel image, which is in
   ELF format, will be read and loaded then the loader jumps to the start()
   routine found in ./src/threads/start.S

Note: By the end of the loader.S file you'll find the assembly directives to
fill the rest of the file with 0s and then the 0xaa55 marker.
The question then is, where is the partitions table?
Pintos.pm script will fill it for us before loading the system (yes, it'll
modify loader.bin when loading it; the file locally remains unchanged)

Start.S:
This is the beginning of the kernel and all it mainly does is safely start the
32-bit protected mode after setting up the needed information for that.
It then transfers control to the main() function found in ./src/threads/init.c
